{"version":3,"sources":["services/movies-api.js","components/MoviesList/MoviesList.js","components/MoviesList/MoviesList.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","views/MoviesPage/MoviesPage.js"],"names":["API_KEY","language","a","page","axios","get","response","data","defaults","baseURL","fetchMovieDetails","movieId","fetchMovie","query","results","fetchActors","fetchReviews","getTrandingMovies","MoviesList","movies","location","useLocation","className","styles","list","map","movie","item","to","pathname","id","state","from","search","src","poster_path","alt","title","width","module","exports","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","defineProperty","getOwnPropertyDescriptors","defineProperties","MoviesPage","useState","setQuery","foundMovies","setFoundMovies","history","useHistory","useEffect","console","log","split","then","resp","onSubmit","e","preventDefault","name","value","onChange","currentTarget","type","size"],"mappings":"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","file":"static/js/moviePage.00ca8bcc.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_KEY = \"22c199c70cf21c77ac06b5d74d444545\";\r\nconst language = \"en-US\";\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\r\n\r\n//запрос на популярные фильмы\r\nasync function getTrandingMovies(page = 1) {\r\n  const response = await axios.get(\r\n    `trending/movie/day?api_key=${API_KEY}&language=${language}&page=${page}`\r\n  );\r\n  return await response.data;\r\n}\r\n\r\n//запрос фильма по id\r\nexport const fetchMovieDetails = async (movieId) => {\r\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\r\n  return response.data;\r\n};\r\n\r\n//запрос данных по query\r\nexport const fetchMovie = async (query) => {\r\n  const response = await axios.get(\r\n    `search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\r\n  );\r\n  return response.data.results;\r\n};\r\n\r\n//запрос информации о актёрском состав\r\nexport const fetchActors = async (movieId) => {\r\n  const response = await axios.get(\r\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n  return response.data;\r\n};\r\n\r\n//запрос обзоров\r\nexport const fetchReviews = async (movieId) => {\r\n  const response = await axios.get(\r\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport default getTrandingMovies;\r\n","import { Link } from \"react-router-dom\";\r\nimport styles from \"./MoviesList.module.css\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BASE_URL = \"https://image.tmdb.org/t/p/w500\";\r\n//для того чтобы загрузились постеры на странице, нужно к BASE_URL добавить адрес постера (адрес постера это свойство poster_path в объекте results)\r\n\r\nfunction MoviesList({ movies }) {\r\n  const location = useLocation();\r\n  // console.log(location);\r\n  return (\r\n    <ul className={styles.list}>\r\n      {movies.map((movie) => {\r\n        return (\r\n          <li key={movie.id} className={styles.item}>\r\n            {/* при клике на какой-то фильм мы должны переходить на movieDetails\r\n            (с помощью Link), и также реализуем переход назад по кнопке (с помощью state: { from: \"/\" }) */}\r\n            <Link\r\n              to={{\r\n                pathname: `/movies/${movie.id}`,\r\n                state: {\r\n                  from:\r\n                    location.pathname !== \"/\"\r\n                      ? location.pathname + location.search\r\n                      : location.pathname,\r\n                },\r\n              }}\r\n            >\r\n              <img\r\n                src={`${BASE_URL}${movie.poster_path}`}\r\n                alt={`${movie.title}`}\r\n                width=\"200\"\r\n              />\r\n            </Link>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nMoviesList.propTypes = {\r\n  movies: PropTypes.array.isRequired,\r\n};\r\nexport default MoviesList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MoviesList_list__1MFTm\",\"item\":\"MoviesList_item__3K03u\"};","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport { fetchMovie } from \"../../services/movies-api\";\r\nimport MoviesList from \"../../components/MoviesList/MoviesList\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\n\r\n//Компонент для поиска фильма\r\nfunction MoviesPage() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [foundMovies, setFoundMovies] = useState([]);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  // console.log(\"history\", history); // search: \"?query=cat\"\r\n  // console.log(\"location\", location); // search: \"?query=cat\"\r\n\r\n  //метод для изменения input\r\n  const handleChange = (e) => {\r\n    // console.log(e.currentTarget);\r\n    setQuery(e.currentTarget.value);\r\n  };\r\n\r\n  //метод для submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchMovie(query).then((resp) => setFoundMovies(resp));\r\n    //при submit фильма в url будет записан параметр query\r\n    history.push({\r\n      ...location,\r\n      search: `query=${query}`,\r\n    });\r\n  };\r\n\r\n  //отображение фильмов по запросу на новой странице\r\n  useEffect(() => {\r\n    console.log();\r\n    if (location.search !== \"\") {\r\n      fetchMovie(location.search.split(\"=\")[1]).then((resp) =>\r\n        setFoundMovies(resp)\r\n      );\r\n      //отображение query в inpute по запросу на новой странице\r\n      setQuery(location.search.split(\"=\")[1]);\r\n    }\r\n  }, [location]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input name=\"query\" value={query} onChange={handleChange} />\r\n        <button type=\"submit\">\r\n          <span>\r\n            <AiOutlineSearch size={17} />\r\n          </span>\r\n          Search\r\n        </button>\r\n      </form>\r\n      <MoviesList movies={foundMovies} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MoviesPage;\r\n//отправляем submit, получаем данные по query, засетить в стате и кинуть массив этих фильмов в наш movieList\r\n"],"sourceRoot":""}